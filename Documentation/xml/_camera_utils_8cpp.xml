<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_camera_utils_8cpp" kind="file" language="C++">
    <compoundname>CameraUtils.cpp</compoundname>
    <includes refid="imagecv_8h" local="no">colorspaces/imagecv.h</includes>
    <includes refid="image_8h" local="no">image.h</includes>
    <includes local="no">zlib.h</includes>
    <includes refid="_camera_utils_8h" local="yes">CameraUtils.h</includes>
    <includes local="no">glog/logging.h</includes>
    <incdepgraph>
      <node id="5612">
        <label>glog/logging.h</label>
      </node>
      <node id="5606">
        <label>uncopyable.h</label>
        <link refid="uncopyable_8h"/>
      </node>
      <node id="5601">
        <label>opencv2/core/core.hpp</label>
      </node>
      <node id="5600">
        <label>colorspaces/imagecv.h</label>
        <link refid="imagecv_8h"/>
        <childnode refid="5601" relation="include">
        </childnode>
        <childnode refid="5602" relation="include">
        </childnode>
        <childnode refid="5603" relation="include">
        </childnode>
        <childnode refid="5604" relation="include">
        </childnode>
        <childnode refid="5605" relation="include">
        </childnode>
        <childnode refid="5606" relation="include">
        </childnode>
      </node>
      <node id="5602">
        <label>exception</label>
      </node>
      <node id="5609">
        <label>CameraUtils.h</label>
        <link refid="_camera_utils_8h"/>
        <childnode refid="5601" relation="include">
        </childnode>
        <childnode refid="5610" relation="include">
        </childnode>
        <childnode refid="5611" relation="include">
        </childnode>
      </node>
      <node id="5610">
        <label>jderobot/image.h</label>
      </node>
      <node id="5607">
        <label>image.h</label>
        <link refid="image_8h"/>
        <childnode refid="5601" relation="include">
        </childnode>
      </node>
      <node id="5603">
        <label>vector</label>
      </node>
      <node id="5604">
        <label>iostream</label>
      </node>
      <node id="5611">
        <label>camera.h</label>
      </node>
      <node id="5599">
        <label>DeepLearningSuite/libs/utils/CameraUtils.cpp</label>
        <link refid="_camera_utils_8cpp"/>
        <childnode refid="5600" relation="include">
        </childnode>
        <childnode refid="5607" relation="include">
        </childnode>
        <childnode refid="5608" relation="include">
        </childnode>
        <childnode refid="5609" relation="include">
        </childnode>
        <childnode refid="5612" relation="include">
        </childnode>
      </node>
      <node id="5608">
        <label>zlib.h</label>
      </node>
      <node id="5605">
        <label>memory</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>frivas<sp/>on<sp/>4/04/17.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="imagecv_8h" kindref="compound">colorspaces/imagecv.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="image_8h" kindref="compound">image.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;zlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_camera_utils_8h" kindref="compound">CameraUtils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;glog/logging.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="class_camera_utils_1a926f945480f84f9a2078cfd651b15c33" refkind="member"><highlight class="normal">cv::Mat<sp/><ref refid="class_camera_utils_1a926f945480f84f9a2078cfd651b15c33" kindref="member">CameraUtils::getImageFromCameraProxy</ref>(jderobot::ImageDataPtr<sp/>dataPtr)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>outImage;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcolorspaces_1_1_image_1ab3978cc7acc2b5e855f8c715f09667d1" kindref="member">colorspaces::Image::FormatPtr</ref><sp/>fmt;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>fmt<sp/>=<sp/><ref refid="classcolorspaces_1_1_image_1_1_format_1a6aab83855bf18ba00c86bccc79075d0c" kindref="member">colorspaces::Image::Format::searchFormat</ref>(dataPtr-&gt;description-&gt;format);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fmt)</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Format<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dataPtr-&gt;description-&gt;format<sp/>==<sp/><ref refid="classcolorspaces_1_1_image_r_g_b8_1a02a89815364677755b02998334820324" kindref="member">colorspaces::ImageRGB8::FORMAT_RGB8_Z</ref>.get()-&gt;name<sp/>||</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataPtr-&gt;description-&gt;format<sp/>==<sp/><ref refid="classcolorspaces_1_1_image_r_g_b8_1accd7299575ca7ba2e2c1f339c00fe102" kindref="member">colorspaces::ImageRGB8::FORMAT_DEPTH8_16_Z</ref>.get()-&gt;name<sp/><sp/>)</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dest_len<sp/>=<sp/>dataPtr-&gt;description-&gt;width*dataPtr-&gt;description-&gt;height*3;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>source_len<sp/>=<sp/>dataPtr-&gt;pixelData.size();</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>origin_buf<sp/>=<sp/>(uchar*)<sp/>malloc(dest_len);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>uncompress((Bytef<sp/>*)<sp/>origin_buf,<sp/>(uLongf<sp/>*)<sp/>&amp;dest_len,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Bytef<sp/>*)<sp/>&amp;(dataPtr-&gt;pixelData[0]),<sp/>(uLong)source_len);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r<sp/>!=<sp/>Z_OK)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;[CMPR]<sp/>Error:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(r)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Z_MEM_ERROR:</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;[CMPR]<sp/>Error:<sp/>Not<sp/>enough<sp/>memory<sp/>to<sp/>compress.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Z_BUF_ERROR:</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;[CMPR]<sp/>Error:<sp/>Target<sp/>buffer<sp/>too<sp/>small.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Z_STREAM_ERROR:<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invalid<sp/>compression<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;[CMPR]<sp/>Error:<sp/>Invalid<sp/>compression<sp/>level.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcolorspaces_1_1_image" kindref="compound">colorspaces::Image</ref><sp/>imageRGB(dataPtr-&gt;description-&gt;width,dataPtr-&gt;description-&gt;height,<ref refid="classcolorspaces_1_1_image_r_g_b8_1abb2bd76934dd71bb401db29cd5082b5c" kindref="member">colorspaces::ImageRGB8::FORMAT_RGB8</ref>,&amp;(origin_buf[0]));</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcolorspaces_1_1_image_r_g_b8" kindref="compound">colorspaces::ImageRGB8</ref><sp/>img_rgb888(imageRGB);</highlight><highlight class="comment">//conversion<sp/>will<sp/>happen<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::Mat(cv::Size(img_rgb888.<ref refid="classcolorspaces_1_1_image_1ab80af7d4797110c23ed575b329ec7c4f" kindref="member">width</ref>,img_rgb888.<ref refid="classcolorspaces_1_1_image_1a99a05ebd37f61215b2c3042ecaefdbfc" kindref="member">height</ref>),<sp/>CV_8UC3,<sp/>img_rgb888.data).copyTo(outImage);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>img_rgb888.release();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(origin_buf)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(origin_buf);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dataPtr-&gt;description-&gt;format<sp/>==<sp/><ref refid="classcolorspaces_1_1_image_r_g_b8_1abb2bd76934dd71bb401db29cd5082b5c" kindref="member">colorspaces::ImageRGB8::FORMAT_RGB8</ref>.get()-&gt;name<sp/>||</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataPtr-&gt;description-&gt;format<sp/>==<sp/><ref refid="classcolorspaces_1_1_image_r_g_b8_1a9425bfababa3570fc70730c4ec76ae51" kindref="member">colorspaces::ImageRGB8::FORMAT_DEPTH8_16</ref>.get()-&gt;name<sp/><sp/>)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcolorspaces_1_1_image" kindref="compound">colorspaces::Image</ref><sp/>imageRGB(dataPtr-&gt;description-&gt;width,dataPtr-&gt;description-&gt;height,<ref refid="classcolorspaces_1_1_image_r_g_b8_1abb2bd76934dd71bb401db29cd5082b5c" kindref="member">colorspaces::ImageRGB8::FORMAT_RGB8</ref>,&amp;(dataPtr-&gt;pixelData[0]));</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcolorspaces_1_1_image_r_g_b8" kindref="compound">colorspaces::ImageRGB8</ref><sp/>img_rgb888(imageRGB);</highlight><highlight class="comment">//conversion<sp/>will<sp/>happen<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::Mat(cv::Size(img_rgb888.<ref refid="classcolorspaces_1_1_image_1ab80af7d4797110c23ed575b329ec7c4f" kindref="member">width</ref>,img_rgb888.<ref refid="classcolorspaces_1_1_image_1a99a05ebd37f61215b2c3042ecaefdbfc" kindref="member">height</ref>),<sp/>CV_8UC3,<sp/>img_rgb888.data).copyTo(outImage);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>img_rgb888.release();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dataPtr-&gt;description-&gt;format<sp/>==<sp/><ref refid="classcolorspaces_1_1_image_g_r_a_y8_1af37dcabe8bbf5ef6f73ed790c88e4896" kindref="member">colorspaces::ImageGRAY8::FORMAT_GRAY8_Z</ref>.get()-&gt;name)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//gay<sp/>compressed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dest_len<sp/>=<sp/>dataPtr-&gt;description-&gt;<ref refid="classcolorspaces_1_1_image_1ab80af7d4797110c23ed575b329ec7c4f" kindref="member">width</ref>*dataPtr-&gt;description-&gt;height;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>source_len<sp/>=<sp/>dataPtr-&gt;pixelData.size();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>origin_buf<sp/>=<sp/>(uchar*)<sp/>malloc(dest_len);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>uncompress((Bytef<sp/>*)<sp/>origin_buf,<sp/>(uLongf<sp/>*)<sp/>&amp;dest_len,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Bytef<sp/>*)<sp/>&amp;(dataPtr-&gt;pixelData[0]),<sp/>(uLong)source_len);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r<sp/>!=<sp/>Z_OK)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;[CMPR]<sp/>Error:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(r)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Z_MEM_ERROR:</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;[CMPR]<sp/>Error:<sp/>Not<sp/>enough<sp/>memory<sp/>to<sp/>compress.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Z_BUF_ERROR:</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;[CMPR]<sp/>Error:<sp/>Target<sp/>buffer<sp/>too<sp/>small.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Z_STREAM_ERROR:<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invalid<sp/>compression<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;[CMPR]<sp/>Error:<sp/>Invalid<sp/>compression<sp/>level.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcolorspaces_1_1_image" kindref="compound">colorspaces::Image</ref><sp/>imageGray(dataPtr-&gt;description-&gt;width,dataPtr-&gt;description-&gt;height,<ref refid="classcolorspaces_1_1_image_g_r_a_y8_1a9bfb4420590a581d76aaaffb3a22806a" kindref="member">colorspaces::ImageGRAY8::FORMAT_GRAY8</ref>,&amp;(origin_buf[0]));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcolorspaces_1_1_image_g_r_a_y8" kindref="compound">colorspaces::ImageGRAY8</ref><sp/>img_gray8(imageGray);</highlight><highlight class="comment">//conversion<sp/>will<sp/>happen<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::Mat(cv::Size(img_gray8.<ref refid="classcolorspaces_1_1_image_1ab80af7d4797110c23ed575b329ec7c4f" kindref="member">width</ref>,img_gray8.<ref refid="classcolorspaces_1_1_image_1a99a05ebd37f61215b2c3042ecaefdbfc" kindref="member">height</ref>),<sp/>CV_8UC1,<sp/>img_gray8.data).copyTo(outImage);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>img_gray8.release();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(origin_buf)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(origin_buf);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dataPtr-&gt;description-&gt;format<sp/>==<sp/><ref refid="classcolorspaces_1_1_image_g_r_a_y8_1a9bfb4420590a581d76aaaffb3a22806a" kindref="member">colorspaces::ImageGRAY8::FORMAT_GRAY8</ref>.get()-&gt;name){</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcolorspaces_1_1_image" kindref="compound">colorspaces::Image</ref><sp/>imageGray(dataPtr-&gt;description-&gt;width,dataPtr-&gt;description-&gt;height,<ref refid="classcolorspaces_1_1_image_g_r_a_y8_1a9bfb4420590a581d76aaaffb3a22806a" kindref="member">colorspaces::ImageGRAY8::FORMAT_GRAY8</ref>,&amp;(dataPtr-&gt;pixelData[0]));</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcolorspaces_1_1_image_g_r_a_y8" kindref="compound">colorspaces::ImageGRAY8</ref><sp/>img_gray8(imageGray);</highlight><highlight class="comment">//conversion<sp/>will<sp/>happen<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::Mat(cv::Size(img_gray8.<ref refid="classcolorspaces_1_1_image_1ab80af7d4797110c23ed575b329ec7c4f" kindref="member">width</ref>,img_gray8.<ref refid="classcolorspaces_1_1_image_1a99a05ebd37f61215b2c3042ecaefdbfc" kindref="member">height</ref>),<sp/>CV_8UC1,<sp/>img_gray8.data).copyTo(outImage);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>img_gray8.release();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(ERROR)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unkown<sp/>image<sp/>format&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>outImage;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="class_camera_utils_1a4eb121d34116f081d07a7cbf6994b43e" refkind="member"><highlight class="normal">std::string<sp/><ref refid="class_camera_utils_1a4eb121d34116f081d07a7cbf6994b43e" kindref="member">CameraUtils::negotiateDefaultFormat</ref>(jderobot::CameraPrx<sp/>prx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>definedFormat)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>format;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Discover<sp/>what<sp/>format<sp/>are<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>jderobot::ImageFormat<sp/>formats<sp/>=<sp/>prx-&gt;getImageFormat();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::find(formats.begin(),<sp/>formats.end(),<sp/>definedFormat);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it==formats.end()){</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::find(formats.begin(),<sp/>formats.end(),<sp/><ref refid="classcolorspaces_1_1_image_r_g_b8_1abb2bd76934dd71bb401db29cd5082b5c" kindref="member">colorspaces::ImageRGB8::FORMAT_RGB8</ref>.get()-&gt;name);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>formats.end())</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format<sp/>=<sp/><ref refid="classcolorspaces_1_1_image_r_g_b8_1abb2bd76934dd71bb401db29cd5082b5c" kindref="member">colorspaces::ImageRGB8::FORMAT_RGB8</ref>.get()-&gt;name;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::find(formats.begin(),<sp/>formats.end(),<sp/><ref refid="classcolorspaces_1_1_image_r_g_b8_1a02a89815364677755b02998334820324" kindref="member">colorspaces::ImageRGB8::FORMAT_RGB8_Z</ref>.get()-&gt;name);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>formats.end())</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format<sp/>=<sp/><ref refid="classcolorspaces_1_1_image_r_g_b8_1a02a89815364677755b02998334820324" kindref="member">colorspaces::ImageRGB8::FORMAT_RGB8_Z</ref>.</highlight><highlight class="keyword">get</highlight><highlight class="normal">()-&gt;name;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::find(formats.begin(),<sp/>formats.end(),<sp/><ref refid="classcolorspaces_1_1_image_r_g_b8_1a9425bfababa3570fc70730c4ec76ae51" kindref="member">colorspaces::ImageRGB8::FORMAT_DEPTH8_16</ref>.get()-&gt;name);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>formats.end())</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format<sp/>=<sp/><ref refid="classcolorspaces_1_1_image_r_g_b8_1a9425bfababa3570fc70730c4ec76ae51" kindref="member">colorspaces::ImageRGB8::FORMAT_DEPTH8_16</ref>.get()-&gt;name;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::find(formats.begin(),<sp/>formats.end(),<sp/><ref refid="classcolorspaces_1_1_image_r_g_b8_1accd7299575ca7ba2e2c1f339c00fe102" kindref="member">colorspaces::ImageRGB8::FORMAT_DEPTH8_16_Z</ref>.get()-&gt;name);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>formats.end())</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format<sp/>=<sp/><ref refid="classcolorspaces_1_1_image_r_g_b8_1accd7299575ca7ba2e2c1f339c00fe102" kindref="member">colorspaces::ImageRGB8::FORMAT_DEPTH8_16_Z</ref>.</highlight><highlight class="keyword">get</highlight><highlight class="normal">()-&gt;name;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format<sp/>=<sp/><ref refid="classcolorspaces_1_1_image_g_r_a_y8_1a9bfb4420590a581d76aaaffb3a22806a" kindref="member">colorspaces::ImageGRAY8::FORMAT_GRAY8</ref>.get()-&gt;name;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::find(formats.begin(),<sp/>formats.end(),<sp/><ref refid="classcolorspaces_1_1_image_g_r_a_y8_1af37dcabe8bbf5ef6f73ed790c88e4896" kindref="member">colorspaces::ImageGRAY8::FORMAT_GRAY8_Z</ref>.get()-&gt;name);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>formats.end())</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format<sp/>=<sp/><ref refid="classcolorspaces_1_1_image_g_r_a_y8_1af37dcabe8bbf5ef6f73ed790c88e4896" kindref="member">colorspaces::ImageGRAY8::FORMAT_GRAY8_Z</ref>.</highlight><highlight class="keyword">get</highlight><highlight class="normal">()-&gt;name;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format<sp/>=<sp/>definedFormat;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(INFO)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Negotiated<sp/>format<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>format<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>for<sp/>camera<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>prx-&gt;getCameraDescription()-&gt;name;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>format;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="class_camera_utils_1a432aaed36b79f14f122991b883f6382c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_camera_utils_1a432aaed36b79f14f122991b883f6382c" kindref="member">CameraUtils::compressImage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv::Mat<sp/>&amp;image,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**compressed_data,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;<sp/>compress_len)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>source_len<sp/>=<sp/>image.rows*image.cols*3;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>compress_len<sp/>=<sp/>compressBound(source_len);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>*compressed_data<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(compress_len);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>compress((Bytef<sp/>*)<sp/>(*compressed_data),<sp/>(uLongf<sp/>*)<sp/>&amp;compress_len,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Bytef<sp/>*)<sp/>&amp;(image.data[0]),<sp/>(uLong)source_len<sp/>);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r<sp/>!=<sp/>Z_OK)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(WARNING)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Compression<sp/>Error&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(r)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Z_MEM_ERROR:</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(ERROR)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Compression<sp/>Error:<sp/>Not<sp/>enough<sp/>memory<sp/>to<sp/>compress&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Z_BUF_ERROR:</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(ERROR)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Compression<sp/>Error:<sp/>Target<sp/>buffer<sp/>too<sp/>small.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Z_STREAM_ERROR:</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(ERROR)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Compression<sp/>Error:<sp/>Invalid<sp/>compression<sp/>level.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="class_camera_utils_1a38071971e6fec4d3786223ebd972e778" refkind="member"><highlight class="normal">jderobot::ImageDataPtr<sp/><ref refid="class_camera_utils_1a38071971e6fec4d3786223ebd972e778" kindref="member">CameraUtils::convert</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv::Mat<sp/>&amp;image)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>jderobot::ImageDataPtr<sp/>reply=jderobot::ImageDataPtr(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>jderobot::ImageData());</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>reply-&gt;description<sp/>=<sp/>jderobot::ImageDescriptionPtr(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>jderobot::ImageDescription());</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>IceUtil::Time<sp/>t<sp/>=<sp/>IceUtil::Time::now();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>reply-&gt;timeStamp.seconds<sp/>=<sp/>(long)t.toSeconds();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>reply-&gt;timeStamp.useconds<sp/>=<sp/>(long)t.toMicroSeconds()<sp/>-<sp/>reply-&gt;timeStamp.seconds*1000000;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>reply-&gt;description-&gt;format<sp/>=<sp/><ref refid="classcolorspaces_1_1_image_r_g_b8_1abb2bd76934dd71bb401db29cd5082b5c" kindref="member">colorspaces::ImageRGB8::FORMAT_RGB8</ref>.get()-&gt;name;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>reply-&gt;description-&gt;width=image.size().width;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>reply-&gt;description-&gt;height=image.size().height;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>reply-&gt;pixelData.resize(image.rows*image.cols<sp/>*<sp/>image.channels());</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;(reply-&gt;pixelData[0]),(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>image.data,<sp/>image.rows*image.cols<sp/>*<sp/>image.channels());</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reply;</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="DeepLearningSuite/libs/utils/CameraUtils.cpp"/>
  </compounddef>
</doxygen>
