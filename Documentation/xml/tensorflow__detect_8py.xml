<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="tensorflow__detect_8py" kind="file" language="Python">
    <compoundname>tensorflow_detect.py</compoundname>
    <innerclass refid="classtensorflow__detect_1_1_tensor_flow_detector" prot="public">tensorflow_detect::TensorFlowDetector</innerclass>
    <innernamespace refid="namespacetensorflow__detect">tensorflow_detect</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacetensorflow__detect" refkind="compound"><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>np</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sys</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>distutils.version<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>StrictVersion</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>hasattr(sys,<sp/></highlight><highlight class="stringliteral">&apos;argv&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="6" refid="namespacetensorflow__detect_1ab9f0bcfda000c7664a363cdb90e34c4f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>sys.argv<sp/><sp/>=<sp/>[</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>tensorflow<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>tf</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>time</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="namespacetensorflow__detect_1a92f27be303bb36c28ed99f95a89104b1" refkind="member"><highlight class="normal">np.set_printoptions(threshold=</highlight><highlight class="stringliteral">&apos;nan&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>StrictVersion(tf.__version__)<sp/>&lt;<sp/>StrictVersion(</highlight><highlight class="stringliteral">&apos;1.4.0&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ImportError(</highlight><highlight class="stringliteral">&apos;Please<sp/>upgrade<sp/>your<sp/>TensorFlow<sp/>installation<sp/>to<sp/>v1.4.*<sp/>or<sp/>later!&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="classtensorflow__detect_1_1_tensor_flow_detector" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtensorflow__detect_1_1_tensor_flow_detector" kindref="compound">TensorFlowDetector</ref>:</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="classtensorflow__detect_1_1_tensor_flow_detector_1a93c5505340a2adfd4505a3299b8ae4b8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtensorflow__detect_1_1_tensor_flow_detector_1a93c5505340a2adfd4505a3299b8ae4b8" kindref="member">__init__</ref>(self,<sp/>path_to_ckpt):</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detection_graph<sp/>=<sp/>tf.Graph()</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>detection_graph.as_default():</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>od_graph_def<sp/>=<sp/>tf.GraphDef()</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>tf.gfile.GFile(path_to_ckpt,<sp/></highlight><highlight class="stringliteral">&apos;rb&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>fid:</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>serialized_graph<sp/>=<sp/>fid.read()</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>od_graph_def.ParseFromString(serialized_graph)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tf.import_graph_def(od_graph_def,<sp/>name=</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ops<sp/>=<sp/>tf.get_default_graph().get_operations()</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_tensor_names<sp/>=<sp/>{output.name<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>op<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>ops<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>output<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>op.outputs}</highlight></codeline>
<codeline lineno="31" refid="classtensorflow__detect_1_1_tensor_flow_detector_1af28b6b2ea938da5a5fcfd755f22bdafe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtensorflow__detect_1_1_tensor_flow_detector_1af28b6b2ea938da5a5fcfd755f22bdafe" kindref="member">tensor_dict</ref><sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>[</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;num_detections&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;detection_boxes&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;detection_scores&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;detection_classes&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;detection_masks&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]:</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensor_name<sp/>=<sp/>key<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;:0&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>tensor_name<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>all_tensor_names:</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtensorflow__detect_1_1_tensor_flow_detector_1af28b6b2ea938da5a5fcfd755f22bdafe" kindref="member">tensor_dict</ref>[key]<sp/>=<sp/>tf.get_default_graph().get_tensor_by_name(</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensor_name)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#if<sp/>&apos;detection_masks&apos;<sp/>in<sp/>self.tensor_dict:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>following<sp/>processing<sp/>is<sp/>only<sp/>for<sp/>single<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#detection_boxes<sp/>=<sp/>tf.squeeze(self.tensor_dict[&apos;detection_boxes&apos;],<sp/>[0])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#detection_masks<sp/>=<sp/>tf.squeeze(self.tensor_dict[&apos;detection_masks&apos;],<sp/>[0])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Reframe<sp/>is<sp/>required<sp/>to<sp/>translate<sp/>mask<sp/>from<sp/>box<sp/>coordinates<sp/>to<sp/>image<sp/>coordinates<sp/>and<sp/>fit<sp/>the<sp/>image<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#real_num_detection<sp/>=<sp/>tf.cast(self.tensor_dict[&apos;num_detections&apos;][0],<sp/>tf.int32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#detection_boxes<sp/>=<sp/>tf.slice(detection_boxes,<sp/>[0,<sp/>0],<sp/>[real_num_detection,<sp/>-1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#detection_masks<sp/>=<sp/>tf.slice(detection_masks,<sp/>[0,<sp/>0,<sp/>0],<sp/>[real_num_detection,<sp/>-1,<sp/>-1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#detection_masks_reframed<sp/>=<sp/>self.reframe_box_masks_to_image_masks(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#detection_masks,<sp/>detection_boxes,<sp/>image.shape[0],<sp/>image.shape[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#detection_masks_reframed<sp/>=<sp/>tf.cast(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#tf.greater(detection_masks_reframed,<sp/>0.5),<sp/>tf.uint8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Follow<sp/>the<sp/>convention<sp/>by<sp/>adding<sp/>back<sp/>the<sp/>batch<sp/>dimension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.tensor_dict[&apos;detection_masks&apos;]<sp/>=<sp/>detection_masks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="classtensorflow__detect_1_1_tensor_flow_detector_1a185cf2de088861188c614957c31278fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtensorflow__detect_1_1_tensor_flow_detector_1a185cf2de088861188c614957c31278fe" kindref="member">image_tensor</ref><sp/>=<sp/>tf.get_default_graph().get_tensor_by_name(</highlight><highlight class="stringliteral">&apos;image_tensor:0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.image_tensor<sp/>=<sp/>detection_graph.get_tensor_by_name(&apos;image_tensor:0&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.detection_boxes<sp/>=<sp/><sp/>detection_graph.get_tensor_by_name(&apos;detection_boxes:0&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.detection_scores<sp/>=<sp/>detection_graph.get_tensor_by_name(&apos;detection_scores:0&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.detection_classes<sp/>=<sp/>detection_graph.get_tensor_by_name(&apos;detection_classes:0&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.num_detections<sp/>=<sp/>detection_graph.get_tensor_by_name(&apos;num_detections:0&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="classtensorflow__detect_1_1_tensor_flow_detector_1a65b0bb63ecdf52de6732e5f8d0efc533" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtensorflow__detect_1_1_tensor_flow_detector_1a65b0bb63ecdf52de6732e5f8d0efc533" kindref="member">sess</ref><sp/>=<sp/>tf.Session(graph=detection_graph)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Initializing&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="classtensorflow__detect_1_1_tensor_flow_detector_1a2cf3856b888126fcd80d48e88e666107" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>dummy_tensor<sp/>=<sp/>np.zeros((1,1,1,3),<sp/>dtype=np.int32)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classtensorflow__detect_1_1_tensor_flow_detector_1a65b0bb63ecdf52de6732e5f8d0efc533" kindref="member">sess</ref>.run(self.<ref refid="classtensorflow__detect_1_1_tensor_flow_detector_1af28b6b2ea938da5a5fcfd755f22bdafe" kindref="member">tensor_dict</ref>,</highlight></codeline>
<codeline lineno="71" refid="classtensorflow__detect_1_1_tensor_flow_detector_1a8c873949217953989176a8cccaf97b54" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>feed_dict={self.<ref refid="classtensorflow__detect_1_1_tensor_flow_detector_1a185cf2de088861188c614957c31278fe" kindref="member">image_tensor</ref>:<sp/>dummy_tensor})</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="classtensorflow__detect_1_1_tensor_flow_detector_1a691b64feeb99ad6f9bc091c95bae01f1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtensorflow__detect_1_1_tensor_flow_detector_1a691b64feeb99ad6f9bc091c95bae01f1" kindref="member">run_inference_for_single_image</ref>(self,<sp/>image):</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image.setflags(write=1)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image_expanded<sp/>=<sp/>np.expand_dims(image,<sp/>axis=0)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_dict<sp/>=<sp/>self.<ref refid="classtensorflow__detect_1_1_tensor_flow_detector_1a65b0bb63ecdf52de6732e5f8d0efc533" kindref="member">sess</ref>.run(</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtensorflow__detect_1_1_tensor_flow_detector_1af28b6b2ea938da5a5fcfd755f22bdafe" kindref="member">tensor_dict</ref>,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>feed_dict={self.<ref refid="classtensorflow__detect_1_1_tensor_flow_detector_1a185cf2de088861188c614957c31278fe" kindref="member">image_tensor</ref>:<sp/>image_expanded})</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_dict[</highlight><highlight class="stringliteral">&apos;num_detections&apos;</highlight><highlight class="normal">]<sp/>=<sp/>int(output_dict[</highlight><highlight class="stringliteral">&apos;num_detections&apos;</highlight><highlight class="normal">][0])</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_dict[</highlight><highlight class="stringliteral">&apos;detection_classes&apos;</highlight><highlight class="normal">]<sp/>=<sp/>output_dict[</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;detection_classes&apos;</highlight><highlight class="normal">][0].astype(np.uint8)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_dict[</highlight><highlight class="stringliteral">&apos;detection_boxes&apos;</highlight><highlight class="normal">]<sp/>=<sp/>output_dict[</highlight><highlight class="stringliteral">&apos;detection_boxes&apos;</highlight><highlight class="normal">][0]</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_dict[</highlight><highlight class="stringliteral">&apos;detection_scores&apos;</highlight><highlight class="normal">]<sp/>=<sp/>output_dict[</highlight><highlight class="stringliteral">&apos;detection_scores&apos;</highlight><highlight class="normal">][0]</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;detection_masks&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>output_dict:</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_dict[</highlight><highlight class="stringliteral">&apos;detection_masks&apos;</highlight><highlight class="normal">]<sp/>=<sp/>output_dict[</highlight><highlight class="stringliteral">&apos;detection_masks&apos;</highlight><highlight class="normal">][0]</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output_dict</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="classtensorflow__detect_1_1_tensor_flow_detector_1a6bc7adeea3ea117897cca495a46fb55a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtensorflow__detect_1_1_tensor_flow_detector_1a6bc7adeea3ea117897cca495a46fb55a" kindref="member">detect</ref>(self,<sp/>img,<sp/>threshold):</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Starting<sp/>inference&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_time<sp/>=<sp/>time.time()</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>the<sp/>array<sp/>based<sp/>representation<sp/>of<sp/>the<sp/>image<sp/>will<sp/>be<sp/>used<sp/>later<sp/>in<sp/>order<sp/>to<sp/>prepare<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>result<sp/>image<sp/>with<sp/>boxes<sp/>and<sp/>labels<sp/>on<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>image_np<sp/>=<sp/>load_image_into_numpy_array(image)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image_passed<sp/>=<sp/>img</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#print<sp/>image_np.shape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#print<sp/>image_passed.shape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#detection_graph<sp/>=<sp/>load_graph(model_path)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Expand<sp/>dimensions<sp/>since<sp/>the<sp/>model<sp/>expects<sp/>images<sp/>to<sp/>have<sp/>shape:<sp/>[1,<sp/>None,<sp/>None,<sp/>3]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>image_np_expanded<sp/>=<sp/>np.expand_dims(image_np,<sp/>axis=0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Actual<sp/>detection.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_time<sp/>=<sp/>time.time()</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_dict<sp/>=<sp/>self.<ref refid="classtensorflow__detect_1_1_tensor_flow_detector_1a691b64feeb99ad6f9bc091c95bae01f1" kindref="member">run_inference_for_single_image</ref>(image_passed)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Visualization<sp/>of<sp/>the<sp/>results<sp/>of<sp/>a<sp/>detection.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Inference<sp/>Time:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str(time.time()<sp/>-<sp/>start_time)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>seconds&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_dict<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_dict[</highlight><highlight class="stringliteral">&apos;detection_scores&apos;</highlight><highlight class="normal">]<sp/>=<sp/>output_dict[</highlight><highlight class="stringliteral">&apos;detection_scores&apos;</highlight><highlight class="normal">][output_dict[</highlight><highlight class="stringliteral">&apos;detection_scores&apos;</highlight><highlight class="normal">]&gt;=threshold]</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_dict[</highlight><highlight class="stringliteral">&apos;detection_boxes&apos;</highlight><highlight class="normal">]<sp/>=<sp/>output_dict[</highlight><highlight class="stringliteral">&apos;detection_boxes&apos;</highlight><highlight class="normal">][0:len(new_dict[</highlight><highlight class="stringliteral">&apos;detection_scores&apos;</highlight><highlight class="normal">]),<sp/>:]</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_dict[</highlight><highlight class="stringliteral">&apos;detection_classes&apos;</highlight><highlight class="normal">]<sp/>=<sp/>output_dict[</highlight><highlight class="stringliteral">&apos;detection_classes&apos;</highlight><highlight class="normal">][0:len(new_dict[</highlight><highlight class="stringliteral">&apos;detection_scores&apos;</highlight><highlight class="normal">])]</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_dict[</highlight><highlight class="stringliteral">&apos;num_detections&apos;</highlight><highlight class="normal">]<sp/>=<sp/>len(new_dict[</highlight><highlight class="stringliteral">&apos;detection_scores&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;detection_masks&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>output_dict:</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_dict[</highlight><highlight class="stringliteral">&apos;detection_masks&apos;</highlight><highlight class="normal">]<sp/>=<sp/>output_dict[</highlight><highlight class="stringliteral">&apos;detection_masks&apos;</highlight><highlight class="normal">][0:len(new_dict[</highlight><highlight class="stringliteral">&apos;detection_scores&apos;</highlight><highlight class="normal">]),<sp/>:]</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#mask<sp/>=<sp/>new_dict[&apos;detection_masks&apos;][0]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#mask<sp/>=<sp/>mask<sp/>&gt;<sp/>0.5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#cv2.imshow(&quot;my<sp/>mask&quot;,<sp/>mask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#cv2.waitKey(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_dict</highlight></codeline>
    </programlisting>
    <location file="DeepLearningSuite/DeepLearningSuiteLib/python_modules/tensorflow_detect.py"/>
  </compounddef>
</doxygen>
