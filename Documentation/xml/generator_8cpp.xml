<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="generator_8cpp" kind="file" language="C++">
    <compoundname>generator.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">random</includes>
    <includes local="no">boost/program_options.hpp</includes>
    <includes local="no">boost/filesystem.hpp</includes>
    <includes local="no">opencv2/highgui/highgui.hpp</includes>
    <includes refid="_recorder_reader_8h" local="yes">DatasetConverters/liveReaders/RecorderReader.h</includes>
    <includes refid="_depth_foreground_segmentator_8h" local="yes">GenerationUtils/DepthForegroundSegmentator.h</includes>
    <includes refid="_detections_validator_8h" local="yes">GenerationUtils/DetectionsValidator.h</includes>
    <includes local="no">glog/logging.h</includes>
    <includes refid="_sample_generation_app_8h" local="no">Utils/SampleGenerationApp.h</includes>
    <includes refid="_framework_inferencer_8h" local="no">FrameworkEvaluator/FrameworkInferencer.h</includes>
    <includes refid="_generic_dataset_reader_8h" local="no">DatasetConverters/readers/GenericDatasetReader.h</includes>
    <incdepgraph>
      <node id="5760">
        <label>list</label>
      </node>
      <node id="5794">
        <label>boost/property_tree/xml_parser.hpp</label>
      </node>
      <node id="5775">
        <label>iomanip</label>
      </node>
      <node id="5745">
        <label>boost/shared_ptr.hpp</label>
      </node>
      <node id="5791">
        <label>ClassType.h</label>
        <link refid="_class_type_8h"/>
        <childnode refid="5743" relation="include">
        </childnode>
      </node>
      <node id="5797">
        <label>OwnDatasetReader.h</label>
        <link refid="_own_dataset_reader_8h"/>
        <childnode refid="5753" relation="include">
        </childnode>
      </node>
      <node id="5781">
        <label>SpinelloDatasetReader.h</label>
        <link refid="_spinello_dataset_reader_8h"/>
        <childnode refid="5753" relation="include">
        </childnode>
      </node>
      <node id="5789">
        <label>boost/filesystem/operations.hpp</label>
      </node>
      <node id="5785">
        <label>rapidjson/prettywriter.h</label>
      </node>
      <node id="5752">
        <label>maskApi.h</label>
        <link refid="mask_api_8h"/>
      </node>
      <node id="5757">
        <label>glog/logging.h</label>
      </node>
      <node id="5750">
        <label>Regions/RleRegions.h</label>
        <link refid="_rle_regions_8h"/>
        <childnode refid="5743" relation="include">
        </childnode>
        <childnode refid="5744" relation="include">
        </childnode>
        <childnode refid="5751" relation="include">
        </childnode>
      </node>
      <node id="5742">
        <label>Regions/RectRegions.h</label>
        <link refid="_rect_regions_8h"/>
        <childnode refid="5743" relation="include">
        </childnode>
        <childnode refid="5744" relation="include">
        </childnode>
        <childnode refid="5746" relation="include">
        </childnode>
        <childnode refid="5747" relation="include">
        </childnode>
      </node>
      <node id="5795">
        <label>boost/foreach.hpp</label>
      </node>
      <node id="5771">
        <label>boost/algorithm/string/classification.hpp</label>
      </node>
      <node id="5744">
        <label>Regions.h</label>
        <link refid="_regions_8h"/>
        <childnode refid="5743" relation="include">
        </childnode>
        <childnode refid="5745" relation="include">
        </childnode>
      </node>
      <node id="5758">
        <label>GenerationUtils/DepthForegroundSegmentator.h</label>
        <link refid="_depth_foreground_segmentator_8h"/>
        <childnode refid="5743" relation="include">
        </childnode>
        <childnode refid="5745" relation="include">
        </childnode>
        <childnode refid="5759" relation="include">
        </childnode>
        <childnode refid="5762" relation="include">
        </childnode>
      </node>
      <node id="5774">
        <label>config/properties.hpp</label>
        <link refid="properties_8hpp"/>
        <childnode refid="5733" relation="include">
        </childnode>
        <childnode refid="5775" relation="include">
        </childnode>
        <childnode refid="5776" relation="include">
        </childnode>
        <childnode refid="5739" relation="include">
        </childnode>
        <childnode refid="5740" relation="include">
        </childnode>
        <childnode refid="5766" relation="include">
        </childnode>
        <childnode refid="5768" relation="include">
        </childnode>
      </node>
      <node id="5743">
        <label>opencv2/opencv.hpp</label>
      </node>
      <node id="5739">
        <label>string</label>
      </node>
      <node id="5754">
        <label>Common/EvalMatrix.h</label>
        <link refid="_eval_matrix_8h"/>
        <childnode refid="5755" relation="include">
        </childnode>
        <childnode refid="5756" relation="include">
        </childnode>
      </node>
      <node id="5756">
        <label>map</label>
      </node>
      <node id="5784">
        <label>rapidjson/document.h</label>
      </node>
      <node id="5748">
        <label>Regions/ContourRegions.h</label>
        <link refid="_contour_regions_8h"/>
        <childnode refid="5743" relation="include">
        </childnode>
        <childnode refid="5744" relation="include">
        </childnode>
        <childnode refid="5749" relation="include">
        </childnode>
      </node>
      <node id="5765">
        <label>config/config.h</label>
        <link refid="config_8h"/>
        <childnode refid="5766" relation="include">
        </childnode>
        <childnode refid="5767" relation="include">
        </childnode>
        <childnode refid="5774" relation="include">
        </childnode>
      </node>
      <node id="5772">
        <label>fstream</label>
      </node>
      <node id="5735">
        <label>boost/program_options.hpp</label>
      </node>
      <node id="5798">
        <label>PrincetonDatasetReader.h</label>
        <link refid="_princeton_dataset_reader_8h"/>
        <childnode refid="5753" relation="include">
        </childnode>
      </node>
      <node id="5786">
        <label>rapidjson/stringbuffer.h</label>
      </node>
      <node id="5782">
        <label>YoloDatasetReader.h</label>
        <link refid="_yolo_dataset_reader_8h"/>
        <childnode refid="5753" relation="include">
        </childnode>
      </node>
      <node id="5763">
        <label>GenerationUtils/DetectionsValidator.h</label>
        <link refid="_detections_validator_8h"/>
        <childnode refid="5743" relation="include">
        </childnode>
        <childnode refid="5741" relation="include">
        </childnode>
      </node>
      <node id="5766">
        <label>yaml-cpp/yaml.h</label>
      </node>
      <node id="5790">
        <label>DatasetConverters/ClassTypeGeneric.h</label>
        <link refid="_class_type_generic_8h"/>
        <childnode refid="5791" relation="include">
        </childnode>
      </node>
      <node id="5734">
        <label>random</label>
      </node>
      <node id="5783">
        <label>COCODatasetReader.h</label>
        <link refid="_c_o_c_o_dataset_reader_8h"/>
        <childnode refid="5753" relation="include">
        </childnode>
        <childnode refid="5784" relation="include">
        </childnode>
        <childnode refid="5785" relation="include">
        </childnode>
        <childnode refid="5786" relation="include">
        </childnode>
        <childnode refid="5787" relation="include">
        </childnode>
        <childnode refid="5788" relation="include">
        </childnode>
        <childnode refid="5789" relation="include">
        </childnode>
        <childnode refid="5790" relation="include">
        </childnode>
      </node>
      <node id="5770">
        <label>boost/algorithm/string/split.hpp</label>
      </node>
      <node id="5779">
        <label>boost/date_time/posix_time/posix_time.hpp</label>
      </node>
      <node id="5778">
        <label>opencv2/imgproc/imgproc.hpp</label>
      </node>
      <node id="5780">
        <label>DatasetConverters/readers/GenericDatasetReader.h</label>
        <link refid="_generic_dataset_reader_8h"/>
        <childnode refid="5739" relation="include">
        </childnode>
        <childnode refid="5781" relation="include">
        </childnode>
        <childnode refid="5782" relation="include">
        </childnode>
        <childnode refid="5783" relation="include">
        </childnode>
        <childnode refid="5792" relation="include">
        </childnode>
        <childnode refid="5796" relation="include">
        </childnode>
        <childnode refid="5753" relation="include">
        </childnode>
        <childnode refid="5797" relation="include">
        </childnode>
        <childnode refid="5798" relation="include">
        </childnode>
        <childnode refid="5799" relation="include">
        </childnode>
      </node>
      <node id="5738">
        <label>DatasetConverters/liveReaders/RecorderReader.h</label>
        <link refid="_recorder_reader_8h"/>
        <childnode refid="5739" relation="include">
        </childnode>
        <childnode refid="5740" relation="include">
        </childnode>
        <childnode refid="5741" relation="include">
        </childnode>
        <childnode refid="5753" relation="include">
        </childnode>
      </node>
      <node id="5764">
        <label>Utils/SampleGenerationApp.h</label>
        <link refid="_sample_generation_app_8h"/>
        <childnode refid="5765" relation="include">
        </childnode>
      </node>
      <node id="5788">
        <label>boost/filesystem/path.hpp</label>
      </node>
      <node id="5751">
        <label>RleRegion.h</label>
        <link refid="_rle_region_8h"/>
        <childnode refid="5745" relation="include">
        </childnode>
        <childnode refid="5752" relation="include">
        </childnode>
      </node>
      <node id="5759">
        <label>DepthFilter.h</label>
        <link refid="_depth_filter_8h"/>
        <childnode refid="5743" relation="include">
        </childnode>
        <childnode refid="5760" relation="include">
        </childnode>
        <childnode refid="5761" relation="include">
        </childnode>
        <childnode refid="5733" relation="include">
        </childnode>
      </node>
      <node id="5768">
        <label>config/stdutils.hpp</label>
        <link refid="stdutils_8hpp"/>
        <childnode refid="5769" relation="include">
        </childnode>
        <childnode refid="5739" relation="include">
        </childnode>
        <childnode refid="5740" relation="include">
        </childnode>
        <childnode refid="5770" relation="include">
        </childnode>
        <childnode refid="5771" relation="include">
        </childnode>
        <childnode refid="5772" relation="include">
        </childnode>
      </node>
      <node id="5741">
        <label>Common/Sample.h</label>
        <link refid="_sample_8h"/>
        <childnode refid="5742" relation="include">
        </childnode>
        <childnode refid="5748" relation="include">
        </childnode>
        <childnode refid="5750" relation="include">
        </childnode>
      </node>
      <node id="5799">
        <label>SamplesReader.h</label>
        <link refid="_samples_reader_8h"/>
        <childnode refid="5753" relation="include">
        </childnode>
      </node>
      <node id="5740">
        <label>vector</label>
      </node>
      <node id="5736">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="5796">
        <label>ImageNetDatasetReader.h</label>
        <link refid="_image_net_dataset_reader_8h"/>
        <childnode refid="5753" relation="include">
        </childnode>
        <childnode refid="5793" relation="include">
        </childnode>
        <childnode refid="5794" relation="include">
        </childnode>
        <childnode refid="5788" relation="include">
        </childnode>
        <childnode refid="5789" relation="include">
        </childnode>
        <childnode refid="5795" relation="include">
        </childnode>
      </node>
      <node id="5776">
        <label>sstream</label>
      </node>
      <node id="5755">
        <label>Matrix.h</label>
        <link refid="_matrix_8h"/>
        <childnode refid="5740" relation="include">
        </childnode>
      </node>
      <node id="5737">
        <label>opencv2/highgui/highgui.hpp</label>
      </node>
      <node id="5749">
        <label>ContourRegion.h</label>
        <link refid="_contour_region_8h"/>
        <childnode refid="5743" relation="include">
        </childnode>
        <childnode refid="5745" relation="include">
        </childnode>
      </node>
      <node id="5769">
        <label>cstdlib</label>
      </node>
      <node id="5793">
        <label>boost/property_tree/ptree.hpp</label>
      </node>
      <node id="5733">
        <label>iostream</label>
      </node>
      <node id="5792">
        <label>PascalVOCDatasetReader.h</label>
        <link refid="_pascal_v_o_c_dataset_reader_8h"/>
        <childnode refid="5753" relation="include">
        </childnode>
        <childnode refid="5793" relation="include">
        </childnode>
        <childnode refid="5794" relation="include">
        </childnode>
        <childnode refid="5788" relation="include">
        </childnode>
        <childnode refid="5789" relation="include">
        </childnode>
        <childnode refid="5795" relation="include">
        </childnode>
      </node>
      <node id="5787">
        <label>rapidjson/error/en.h</label>
      </node>
      <node id="5761">
        <label>mutex</label>
      </node>
      <node id="5767">
        <label>config/loader.hpp</label>
        <link refid="loader_8hpp"/>
        <childnode refid="5733" relation="include">
        </childnode>
        <childnode refid="5739" relation="include">
        </childnode>
        <childnode refid="5768" relation="include">
        </childnode>
        <childnode refid="5766" relation="include">
        </childnode>
        <childnode refid="5773" relation="include">
        </childnode>
        <childnode refid="5774" relation="include">
        </childnode>
      </node>
      <node id="5777">
        <label>FrameworkEvaluator/FrameworkInferencer.h</label>
        <link refid="_framework_inferencer_8h"/>
        <childnode refid="5743" relation="include">
        </childnode>
        <childnode refid="5778" relation="include">
        </childnode>
        <childnode refid="5745" relation="include">
        </childnode>
        <childnode refid="5741" relation="include">
        </childnode>
        <childnode refid="5779" relation="include">
        </childnode>
        <childnode refid="5747" relation="include">
        </childnode>
      </node>
      <node id="5746">
        <label>RectRegion.h</label>
        <link refid="_rect_region_8h"/>
        <childnode refid="5743" relation="include">
        </childnode>
      </node>
      <node id="5753">
        <label>DatasetConverters/readers/DatasetReader.h</label>
        <link refid="_dataset_reader_8h"/>
        <childnode refid="5739" relation="include">
        </childnode>
        <childnode refid="5741" relation="include">
        </childnode>
        <childnode refid="5745" relation="include">
        </childnode>
        <childnode refid="5754" relation="include">
        </childnode>
        <childnode refid="5757" relation="include">
        </childnode>
      </node>
      <node id="5762">
        <label>opencv2/core/version.hpp</label>
      </node>
      <node id="5747">
        <label>algorithm</label>
      </node>
      <node id="5732">
        <label>DeepLearningSuite/SampleGenerationApp/generator.cpp</label>
        <link refid="generator_8cpp"/>
        <childnode refid="5733" relation="include">
        </childnode>
        <childnode refid="5734" relation="include">
        </childnode>
        <childnode refid="5735" relation="include">
        </childnode>
        <childnode refid="5736" relation="include">
        </childnode>
        <childnode refid="5737" relation="include">
        </childnode>
        <childnode refid="5738" relation="include">
        </childnode>
        <childnode refid="5758" relation="include">
        </childnode>
        <childnode refid="5763" relation="include">
        </childnode>
        <childnode refid="5757" relation="include">
        </childnode>
        <childnode refid="5764" relation="include">
        </childnode>
        <childnode refid="5777" relation="include">
        </childnode>
        <childnode refid="5780" relation="include">
        </childnode>
      </node>
      <node id="5773">
        <label>yaml-cpp/exceptions.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_my_app" prot="public">MyApp</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="generator_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="DeepLearningSuite/SampleGenerationApp/generator.cpp" line="214" column="1" bodyfile="DeepLearningSuite/SampleGenerationApp/generator.cpp" bodystart="214" bodyend="219"/>
        <references refid="class_sample_generation_app_1acec58569149ac1fc8af9525d35b9e88a" compoundref="_sample_generation_app_8cpp" startline="90" endline="93">SampleGenerationApp::process</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;random&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/program_options.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/filesystem.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;opencv2/highgui/highgui.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_recorder_reader_8h" kindref="compound">DatasetConverters/liveReaders/RecorderReader.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_depth_foreground_segmentator_8h" kindref="compound">GenerationUtils/DepthForegroundSegmentator.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_detections_validator_8h" kindref="compound">GenerationUtils/DetectionsValidator.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;glog/logging.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_sample_generation_app_8h" kindref="compound">Utils/SampleGenerationApp.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_framework_inferencer_8h" kindref="compound">FrameworkEvaluator/FrameworkInferencer.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DARKNET_ACTIVE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_darknet_inferencer_8h" kindref="compound">FrameworkEvaluator/DarknetInferencer.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_generic_dataset_reader_8h" kindref="compound">DatasetConverters/readers/GenericDatasetReader.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_my_app" kindref="compound">MyApp</ref>:</highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_sample_generation_app" kindref="compound">SampleGenerationApp</ref>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="24" refid="class_my_app_1a2cedcf8942b99702d5e26db7d07ff57b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_my_app_1a2cedcf8942b99702d5e26db7d07ff57b" kindref="member">MyApp</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_sample_generation_app_1af98f6187cc8eb62fc3fe0ff53df76b6e" kindref="member">argc</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="class_sample_generation_app_1a7e490e3711491c2bc58351f9e9dd9945" kindref="member">argv</ref>[]):<ref refid="class_sample_generation_app" kindref="compound">SampleGenerationApp</ref>(argc,argv){</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sample_generation_app_1a1dae733636d90e8b5d27002cf513e59a" kindref="member">requiredArguments</ref>.emplace_back(</highlight><highlight class="stringliteral">&quot;outputPath&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sample_generation_app_1a1dae733636d90e8b5d27002cf513e59a" kindref="member">requiredArguments</ref>.emplace_back(</highlight><highlight class="stringliteral">&quot;reader&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sample_generation_app_1a1dae733636d90e8b5d27002cf513e59a" kindref="member">requiredArguments</ref>.emplace_back(</highlight><highlight class="stringliteral">&quot;detector&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="31" refid="class_my_app_1ab3cc458e74a9fc059504fa33983249ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_my_app_1ab3cc458e74a9fc059504fa33983249ee" kindref="member">operator()</ref>(){</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>YAML::Node<sp/>outputPath=this-&gt;<ref refid="class_sample_generation_app_1a4123900b02b2c4d61e9425d9b35da2f2" kindref="member">config</ref>.<ref refid="class_config_1_1_properties_1abb18930b0431bd89e85ed0a5b9b7cac3" kindref="member">getNode</ref>(</highlight><highlight class="stringliteral">&quot;outputPath&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>YAML::Node<sp/>reader=this-&gt;<ref refid="class_sample_generation_app_1a4123900b02b2c4d61e9425d9b35da2f2" kindref="member">config</ref>.<ref refid="class_config_1_1_properties_1abb18930b0431bd89e85ed0a5b9b7cac3" kindref="member">getNode</ref>(</highlight><highlight class="stringliteral">&quot;reader&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>YAML::Node<sp/>detectorKey<sp/>=<sp/>this-&gt;<ref refid="class_sample_generation_app_1a4123900b02b2c4d61e9425d9b35da2f2" kindref="member">config</ref>.<ref refid="class_config_1_1_properties_1abb18930b0431bd89e85ed0a5b9b7cac3" kindref="member">getNode</ref>(</highlight><highlight class="stringliteral">&quot;detector&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>YAML::Node<sp/>colorImagesPathKey;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>YAML::Node<sp/>depthImagesPathKey;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>YAML::Node<sp/>dataPath;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>(reader.as&lt;std::string&gt;()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;recorder&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorImagesPathKey<sp/>=<sp/>this-&gt;<ref refid="class_sample_generation_app_1a4123900b02b2c4d61e9425d9b35da2f2" kindref="member">config</ref>.<ref refid="class_config_1_1_properties_1abb18930b0431bd89e85ed0a5b9b7cac3" kindref="member">getNode</ref>(</highlight><highlight class="stringliteral">&quot;colorImagesPath&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>depthImagesPathKey<sp/>=<sp/>this-&gt;<ref refid="class_sample_generation_app_1a4123900b02b2c4d61e9425d9b35da2f2" kindref="member">config</ref>.<ref refid="class_config_1_1_properties_1abb18930b0431bd89e85ed0a5b9b7cac3" kindref="member">getNode</ref>(</highlight><highlight class="stringliteral">&quot;depthImagesPath&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataPath<sp/>=<sp/>this-&gt;<ref refid="class_sample_generation_app_1a4123900b02b2c4d61e9425d9b35da2f2" kindref="member">config</ref>.<ref refid="class_config_1_1_properties_1abb18930b0431bd89e85ed0a5b9b7cac3" kindref="member">getNode</ref>(</highlight><highlight class="stringliteral">&quot;dataPath&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//todo<sp/>include<sp/>in<sp/>upper<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>detectorOptions;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detectorOptions.push_back(</highlight><highlight class="stringliteral">&quot;pentalo-bg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detectorOptions.push_back(</highlight><highlight class="stringliteral">&quot;deepLearning&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detectorOptions.push_back(</highlight><highlight class="stringliteral">&quot;datasetReader&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::find(detectorOptions.begin(),detectorOptions.end(),detectorKey.as&lt;std::string&gt;())==<sp/>detectorOptions.end()){</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(ERROR)<sp/>&lt;&lt;<sp/>detectorKey.as&lt;std::string&gt;()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>nor<sp/>supported&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(detectorKey.as&lt;std::string&gt;()==</highlight><highlight class="stringliteral">&quot;pentalo-bg&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_recorder_reader" kindref="compound">RecorderReader</ref><sp/>converter(colorImagesPathKey.as&lt;std::string&gt;(),<sp/>depthImagesPathKey.as&lt;std::string&gt;());</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_depth_foreground_segmentator" kindref="compound">DepthForegroundSegmentator</ref><sp/>segmentator;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_detections_validator" kindref="compound">DetectionsValidator</ref><sp/>validator(outputPath.as&lt;std::string&gt;());</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::Mat<sp/>previousImage;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxElements<sp/>=<sp/>converter.<ref refid="class_recorder_reader_1a5aba35af024680621c7af019049f0b6e" kindref="member">getNumSamples</ref>();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sample" kindref="compound">Sample</ref><sp/>sample;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(converter.<ref refid="class_recorder_reader_1afc52cde597201a1838e6e31b8c801941" kindref="member">getNextSample</ref>(sample))<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter++;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>counter<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>maxElements;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(INFO)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Processing<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>ss.str()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::Mat<sp/>colorImage<sp/>=<sp/>sample.<ref refid="struct_sample_1abf69bbc9b312c22d3ded30d30d1e278f" kindref="member">getColorImage</ref>().clone();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::cvtColor(colorImage,<sp/>colorImage,<sp/>cv::COLOR_RGB2BGR);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!previousImage.empty())<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::Mat<sp/>diff;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::absdiff(colorImage,<sp/>previousImage,<sp/>diff);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>cv::sum(cv::sum(diff));</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val[0]<sp/>&lt;<sp/>1000)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorImage.copyTo(previousImage);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::Mat<sp/>depthImage<sp/>=<sp/>sample.<ref refid="struct_sample_1a4d2e91f909467a974832c9359cc81c3c" kindref="member">getDepthImage</ref>().clone();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;cv::Point&gt;&gt;<sp/>detections<sp/>=<sp/>segmentator.<ref refid="class_depth_foreground_segmentator_1a7ad8701ffcce41cf71694f02bbb5f40d" kindref="member">process</ref>(depthImage);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>validator.<ref refid="class_detections_validator_1a105c1bda43fee24887005840fccb7576" kindref="member">validate</ref>(colorImage,<sp/>depthImage,<sp/>detections);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(detectorKey.as&lt;std::string&gt;()==</highlight><highlight class="stringliteral">&quot;deepLearning&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>YAML::Node<sp/>inferencerImplementationKey=this-&gt;<ref refid="class_sample_generation_app_1a4123900b02b2c4d61e9425d9b35da2f2" kindref="member">config</ref>.<ref refid="class_config_1_1_properties_1abb18930b0431bd89e85ed0a5b9b7cac3" kindref="member">getNode</ref>(</highlight><highlight class="stringliteral">&quot;inferencerImplementation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>YAML::Node<sp/>inferencerNamesKey=this-&gt;<ref refid="class_sample_generation_app_1a4123900b02b2c4d61e9425d9b35da2f2" kindref="member">config</ref>.<ref refid="class_config_1_1_properties_1abb18930b0431bd89e85ed0a5b9b7cac3" kindref="member">getNode</ref>(</highlight><highlight class="stringliteral">&quot;inferencerNames&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>YAML::Node<sp/>inferencerConfigKey=this-&gt;<ref refid="class_sample_generation_app_1a4123900b02b2c4d61e9425d9b35da2f2" kindref="member">config</ref>.<ref refid="class_config_1_1_properties_1abb18930b0431bd89e85ed0a5b9b7cac3" kindref="member">getNode</ref>(</highlight><highlight class="stringliteral">&quot;inferencerConfig&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>YAML::Node<sp/>inferencerWeightsKey=this-&gt;<ref refid="class_sample_generation_app_1a4123900b02b2c4d61e9425d9b35da2f2" kindref="member">config</ref>.<ref refid="class_config_1_1_properties_1abb18930b0431bd89e85ed0a5b9b7cac3" kindref="member">getNode</ref>(</highlight><highlight class="stringliteral">&quot;inferencerWeights&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_recorder_reader_8h_1a89a7b8acfb902152192000ab4e1bf269" kindref="member">RecorderReaderPtr</ref><sp/>converter;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reader.as&lt;std::string&gt;()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;recorder-rgbd&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>converter=<ref refid="_recorder_reader_8h_1a89a7b8acfb902152192000ab4e1bf269" kindref="member">RecorderReaderPtr</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_recorder_reader" kindref="compound">RecorderReader</ref>(dataPath.as&lt;std::string&gt;()));</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>converter=<ref refid="_recorder_reader_8h_1a89a7b8acfb902152192000ab4e1bf269" kindref="member">RecorderReaderPtr</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_recorder_reader" kindref="compound">RecorderReader</ref>(colorImagesPathKey.as&lt;std::string&gt;(),<sp/>depthImagesPathKey.as&lt;std::string&gt;()));</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_framework_inferencer_8h_1a7b59ebc4b080d1be0d1a6240703011f2" kindref="member">FrameworkInferencerPtr</ref><sp/>inferencer;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inferencerImplementationKey.as&lt;std::string&gt;()==</highlight><highlight class="stringliteral">&quot;yolo&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DARKNET_ACTIVE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inferencer<sp/>=<sp/><ref refid="_darknet_inferencer_8h_1a3367271d68bed2ea0a4e8d039bf86f90" kindref="member">DarknetInferencerPtr</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_darknet_inferencer" kindref="compound">DarknetInferencer</ref>(inferencerConfigKey.as&lt;std::string&gt;(),<sp/>inferencerWeightsKey.as&lt;std::string&gt;(),<sp/>inferencerNamesKey.as&lt;std::string&gt;()));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(WARNING)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Darknet<sp/>inferencer<sp/>is<sp/>not<sp/>available&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(WARNING)<sp/>&lt;&lt;<sp/>inferencerImplementationKey.as&lt;std::string&gt;()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>not<sp/>a<sp/>valid<sp/>inferencer<sp/>implementation&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_detections_validator" kindref="compound">DetectionsValidator</ref><sp/>validator(outputPath.as&lt;std::string&gt;());</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxElements<sp/>=<sp/>converter-&gt;getNumSamples();</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sample" kindref="compound">Sample</ref><sp/>sample;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter=0;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>skipSamples=10;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::random_device<sp/>rd;<sp/></highlight><highlight class="comment">//<sp/>obtain<sp/>a<sp/>random<sp/>number<sp/>from<sp/>hardware</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::mt19937<sp/>eng(rd());<sp/></highlight><highlight class="comment">//<sp/>seed<sp/>the<sp/>generator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::uniform_int_distribution&lt;&gt;<sp/>distr(5,<sp/>skipSamples);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxElements==0){</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(ERROR)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>sample<sp/>data&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(converter-&gt;getNextSample(sample))<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>samples_to_skip=distr(eng);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Skipping.<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>samples_to_skip<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>validSample=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>samples_to_skip;<sp/>i++){</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>validSample=converter-&gt;getNextSample(sample);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!validSample)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter++;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>counter<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>maxElements;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(INFO)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Processing<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>ss.str()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>thresh<sp/>=<sp/>0.2;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sample" kindref="compound">Sample</ref><sp/>detectedSample<sp/>=<sp/>inferencer-&gt;detect(sample.<ref refid="struct_sample_1abf69bbc9b312c22d3ded30d30d1e278f" kindref="member">getColorImage</ref>(),<sp/>thresh);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detectedSample.<ref refid="struct_sample_1a37c84ccbf7cbc37823327da68037c51a" kindref="member">setColorImage</ref>(sample.<ref refid="struct_sample_1abf69bbc9b312c22d3ded30d30d1e278f" kindref="member">getColorImage</ref>());</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detectedSample.<ref refid="struct_sample_1a1a140ca4aa294de160581251fe5072e5" kindref="member">setDepthImage</ref>(sample.<ref refid="struct_sample_1a4d2e91f909467a974832c9359cc81c3c" kindref="member">getDepthImage</ref>());</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>validator.validate(detectedSample);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(detectorKey.as&lt;std::string&gt;()==</highlight><highlight class="stringliteral">&quot;datasetReader&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>YAML::Node<sp/>readerNamesKey=this-&gt;<ref refid="class_sample_generation_app_1a4123900b02b2c4d61e9425d9b35da2f2" kindref="member">config</ref>.<ref refid="class_config_1_1_properties_1abb18930b0431bd89e85ed0a5b9b7cac3" kindref="member">getNode</ref>(</highlight><highlight class="stringliteral">&quot;readerNames&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//readerImplementationGT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_generic_dataset_reader_8h_1aee69804c49b311360ba65543d4111f58" kindref="member">GenericDatasetReaderPtr</ref><sp/>readerImp(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_generic_dataset_reader" kindref="compound">GenericDatasetReader</ref>(dataPath.as&lt;std::string&gt;(),readerNamesKey.as&lt;std::string&gt;(),<sp/>reader.as&lt;std::string&gt;(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_detections_validator" kindref="compound">DetectionsValidator</ref><sp/>validator(outputPath.as&lt;std::string&gt;(),1.5);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxElements<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sample" kindref="compound">Sample</ref><sp/>sample;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter=0;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>skipSamples=10;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::random_device<sp/>rd;<sp/></highlight><highlight class="comment">//<sp/>obtain<sp/>a<sp/>random<sp/>number<sp/>from<sp/>hardware</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::mt19937<sp/>eng(rd());<sp/></highlight><highlight class="comment">//<sp/>seed<sp/>the<sp/>generator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::uniform_int_distribution&lt;&gt;<sp/>distr(5,<sp/>skipSamples);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(readerImp-&gt;getReader()-&gt;getNextSample(sample))<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>samples_to_skip=distr(eng);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Skipping.<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>samples_to_skip<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>validSample=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>samples_to_skip;<sp/>i++){</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>validSample=readerImp-&gt;getReader()-&gt;getNextSample(sample);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!validSample)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter++;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>counter<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>maxElements;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(INFO)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Processing<sp/>[&quot;</highlight><highlight class="normal"><sp/>+<sp/>ss.str()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>validator.<ref refid="class_detections_validator_1a105c1bda43fee24887005840fccb7576" kindref="member">validate</ref>(sample);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="210"><highlight class="normal">};</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214" refid="generator_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="generator_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_sample_generation_app_1af98f6187cc8eb62fc3fe0ff53df76b6e" kindref="member">argc</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="class_sample_generation_app_1a7e490e3711491c2bc58351f9e9dd9945" kindref="member">argv</ref>[])</highlight></codeline>
<codeline lineno="215"><highlight class="normal">{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_my_app" kindref="compound">MyApp</ref><sp/>myApp(argc,argv);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>myApp.<ref refid="class_sample_generation_app_1acec58569149ac1fc8af9525d35b9e88a" kindref="member">process</ref>();</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="DeepLearningSuite/SampleGenerationApp/generator.cpp"/>
  </compounddef>
</doxygen>
