<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_mass_inferencer_8cpp" kind="file" language="C++">
    <compoundname>MassInferencer.cpp</compoundname>
    <includes local="no">boost/filesystem/path.hpp</includes>
    <includes local="no">boost/filesystem/operations.hpp</includes>
    <includes local="no">glog/logging.h</includes>
    <includes refid="_mass_inferencer_8h" local="yes">MassInferencer.h</includes>
    <incdepgraph>
      <node id="3719">
        <label>boost/shared_ptr.hpp</label>
      </node>
      <node id="3710">
        <label>boost/filesystem/operations.hpp</label>
      </node>
      <node id="3726">
        <label>maskApi.h</label>
        <link refid="mask_api_8h"/>
      </node>
      <node id="3711">
        <label>glog/logging.h</label>
      </node>
      <node id="3724">
        <label>Regions/RleRegions.h</label>
        <link refid="_rle_regions_8h"/>
        <childnode refid="3717" relation="include">
        </childnode>
        <childnode refid="3718" relation="include">
        </childnode>
        <childnode refid="3725" relation="include">
        </childnode>
      </node>
      <node id="3716">
        <label>Regions/RectRegions.h</label>
        <link refid="_rect_regions_8h"/>
        <childnode refid="3717" relation="include">
        </childnode>
        <childnode refid="3718" relation="include">
        </childnode>
        <childnode refid="3720" relation="include">
        </childnode>
        <childnode refid="3721" relation="include">
        </childnode>
      </node>
      <node id="3718">
        <label>Regions.h</label>
        <link refid="_regions_8h"/>
        <childnode refid="3717" relation="include">
        </childnode>
        <childnode refid="3719" relation="include">
        </childnode>
      </node>
      <node id="3717">
        <label>opencv2/opencv.hpp</label>
      </node>
      <node id="3714">
        <label>string</label>
      </node>
      <node id="3727">
        <label>Common/EvalMatrix.h</label>
        <link refid="_eval_matrix_8h"/>
        <childnode refid="3728" relation="include">
        </childnode>
        <childnode refid="3730" relation="include">
        </childnode>
      </node>
      <node id="3730">
        <label>map</label>
      </node>
      <node id="3722">
        <label>Regions/ContourRegions.h</label>
        <link refid="_contour_regions_8h"/>
        <childnode refid="3717" relation="include">
        </childnode>
        <childnode refid="3718" relation="include">
        </childnode>
        <childnode refid="3723" relation="include">
        </childnode>
      </node>
      <node id="3712">
        <label>MassInferencer.h</label>
        <link refid="_mass_inferencer_8h"/>
        <childnode refid="3713" relation="include">
        </childnode>
        <childnode refid="3731" relation="include">
        </childnode>
      </node>
      <node id="3733">
        <label>boost/date_time/posix_time/posix_time.hpp</label>
      </node>
      <node id="3732">
        <label>opencv2/imgproc/imgproc.hpp</label>
      </node>
      <node id="3709">
        <label>boost/filesystem/path.hpp</label>
      </node>
      <node id="3725">
        <label>RleRegion.h</label>
        <link refid="_rle_region_8h"/>
        <childnode refid="3719" relation="include">
        </childnode>
        <childnode refid="3726" relation="include">
        </childnode>
      </node>
      <node id="3715">
        <label>Common/Sample.h</label>
        <link refid="_sample_8h"/>
        <childnode refid="3716" relation="include">
        </childnode>
        <childnode refid="3722" relation="include">
        </childnode>
        <childnode refid="3724" relation="include">
        </childnode>
      </node>
      <node id="3729">
        <label>vector</label>
      </node>
      <node id="3728">
        <label>Matrix.h</label>
        <link refid="_matrix_8h"/>
        <childnode refid="3729" relation="include">
        </childnode>
      </node>
      <node id="3723">
        <label>ContourRegion.h</label>
        <link refid="_contour_region_8h"/>
        <childnode refid="3717" relation="include">
        </childnode>
        <childnode refid="3719" relation="include">
        </childnode>
      </node>
      <node id="3708">
        <label>DeepLearningSuite/DeepLearningSuiteLib/FrameworkEvaluator/MassInferencer.cpp</label>
        <link refid="_mass_inferencer_8cpp"/>
        <childnode refid="3709" relation="include">
        </childnode>
        <childnode refid="3710" relation="include">
        </childnode>
        <childnode refid="3711" relation="include">
        </childnode>
        <childnode refid="3712" relation="include">
        </childnode>
      </node>
      <node id="3731">
        <label>FrameworkEvaluator/FrameworkInferencer.h</label>
        <link refid="_framework_inferencer_8h"/>
        <childnode refid="3717" relation="include">
        </childnode>
        <childnode refid="3732" relation="include">
        </childnode>
        <childnode refid="3719" relation="include">
        </childnode>
        <childnode refid="3715" relation="include">
        </childnode>
        <childnode refid="3733" relation="include">
        </childnode>
        <childnode refid="3721" relation="include">
        </childnode>
      </node>
      <node id="3720">
        <label>RectRegion.h</label>
        <link refid="_rect_region_8h"/>
        <childnode refid="3717" relation="include">
        </childnode>
      </node>
      <node id="3713">
        <label>DatasetConverters/readers/DatasetReader.h</label>
        <link refid="_dataset_reader_8h"/>
        <childnode refid="3714" relation="include">
        </childnode>
        <childnode refid="3715" relation="include">
        </childnode>
        <childnode refid="3719" relation="include">
        </childnode>
        <childnode refid="3727" relation="include">
        </childnode>
        <childnode refid="3711" relation="include">
        </childnode>
      </node>
      <node id="3721">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>frivas<sp/>on<sp/>1/02/17.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/filesystem/path.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/filesystem/operations.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;glog/logging.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_mass_inferencer_8h" kindref="compound">MassInferencer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="class_mass_inferencer_1a358995e115d7c7a015620ca42df10fe9" refkind="member"><highlight class="normal"><ref refid="class_mass_inferencer_1aa1f9519adb814a99f8c20a5d28d2f4e9" kindref="member">MassInferencer::MassInferencer</ref>(<ref refid="_dataset_reader_8h_1a30d89cba514a220d64d04535c0465f1c" kindref="member">DatasetReaderPtr</ref><sp/>reader,<sp/><ref refid="_framework_inferencer_8h_1a7b59ebc4b080d1be0d1a6240703011f2" kindref="member">FrameworkInferencerPtr</ref><sp/>inferencer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>resultsPath,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>debug)</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/>:<sp/><ref refid="class_mass_inferencer" kindref="compound">MassInferencer</ref>::<ref refid="class_mass_inferencer" kindref="compound">MassInferencer</ref>(reader,<sp/>inferencer,<sp/>resultsPath,<sp/>NULL,<sp/>debug)<sp/>{}<sp/><sp/></highlight><highlight class="comment">//<sp/>Delegating<sp/>Constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="class_mass_inferencer_1a785c29013dd824096d2cf5992d5a1f86" refkind="member"><highlight class="normal"><ref refid="class_mass_inferencer_1aa1f9519adb814a99f8c20a5d28d2f4e9" kindref="member">MassInferencer::MassInferencer</ref>(<ref refid="_dataset_reader_8h_1a30d89cba514a220d64d04535c0465f1c" kindref="member">DatasetReaderPtr</ref><sp/>reader,<sp/><ref refid="_framework_inferencer_8h_1a7b59ebc4b080d1be0d1a6240703011f2" kindref="member">FrameworkInferencerPtr</ref><sp/>inferencer,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>debug)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/>:<sp/><ref refid="class_mass_inferencer" kindref="compound">MassInferencer</ref>::<ref refid="class_mass_inferencer" kindref="compound">MassInferencer</ref>(reader,<sp/>inferencer,<sp/>NULL,<sp/>debug)<sp/>{}<sp/><sp/></highlight><highlight class="comment">//<sp/>Delegating<sp/>Constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="class_mass_inferencer_1aa1f9519adb814a99f8c20a5d28d2f4e9" refkind="member"><highlight class="normal"><ref refid="class_mass_inferencer_1aa1f9519adb814a99f8c20a5d28d2f4e9" kindref="member">MassInferencer::MassInferencer</ref>(<ref refid="_dataset_reader_8h_1a30d89cba514a220d64d04535c0465f1c" kindref="member">DatasetReaderPtr</ref><sp/>reader,<sp/><ref refid="_framework_inferencer_8h_1a7b59ebc4b080d1be0d1a6240703011f2" kindref="member">FrameworkInferencerPtr</ref><sp/>inferencer,</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;resultsPath,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>confidence_threshold,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>debug):<sp/>reader(reader),<sp/>inferencer(inferencer),<sp/>resultsPath(resultsPath),confidence_threshold(confidence_threshold),debug(debug)</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resultsPath.empty())</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>saveOutput<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>saveOutput<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>alreadyProcessed=0;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!resultsPath.empty())<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>boostPath=<sp/><ref refid="namespaceload_image_1a2d12fe0487467ded88b6007624cbe6c7" kindref="member">boost::filesystem::path</ref>(this-&gt;resultsPath);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!boost::filesystem::exists(boostPath)){</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::filesystem::create_directories(boostPath);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(WARNING)&lt;&lt;</highlight><highlight class="stringliteral">&quot;Output<sp/>directory<sp/>already<sp/>exists&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(WARNING)&lt;&lt;</highlight><highlight class="stringliteral">&quot;Continuing<sp/>detecting&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::filesystem::directory_iterator<sp/>end_itr;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(boost::filesystem::directory_iterator<sp/>itr(boostPath);<sp/>itr!=end_itr;<sp/>++itr)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((is_regular_file(itr-&gt;status())<sp/>&amp;&amp;<sp/>itr-&gt;path().extension()==</highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(itr-&gt;path().string().find(</highlight><highlight class="stringliteral">&quot;-depth&quot;</highlight><highlight class="normal">)<sp/>==<sp/>std::string::npos))<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alreadyProcessed++;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//exit(-1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="class_mass_inferencer_1a47dfb5d42669485a0390c579051e57f9" refkind="member"><highlight class="normal"><ref refid="class_mass_inferencer_1aa1f9519adb814a99f8c20a5d28d2f4e9" kindref="member">MassInferencer::MassInferencer</ref>(<ref refid="_dataset_reader_8h_1a30d89cba514a220d64d04535c0465f1c" kindref="member">DatasetReaderPtr</ref><sp/>reader,<sp/><ref refid="_framework_inferencer_8h_1a7b59ebc4b080d1be0d1a6240703011f2" kindref="member">FrameworkInferencerPtr</ref><sp/>inferencer,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;resultsPath,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>stopDeployer,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>confidence_threshold,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>debug):<sp/>reader(reader),<sp/>inferencer(inferencer),<sp/>resultsPath(resultsPath),debug(debug),stopDeployer(stopDeployer),confidence_threshold(confidence_threshold)</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resultsPath.empty())</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>saveOutput<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>saveOutput<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>alreadyProcessed=0;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!resultsPath.empty())<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>boostPath=<sp/><ref refid="namespaceload_image_1a2d12fe0487467ded88b6007624cbe6c7" kindref="member">boost::filesystem::path</ref>(this-&gt;resultsPath);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!boost::filesystem::exists(boostPath)){</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::filesystem::create_directories(boostPath);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(WARNING)&lt;&lt;</highlight><highlight class="stringliteral">&quot;Output<sp/>directory<sp/>already<sp/>exists&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(WARNING)&lt;&lt;</highlight><highlight class="stringliteral">&quot;Files<sp/>might<sp/>be<sp/>overwritten,<sp/>if<sp/>present<sp/>in<sp/>the<sp/>directory&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::filesystem::directory_iterator<sp/>end_itr;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="class_mass_inferencer_1afc617523cbd7df73545cda0755e9ff77" refkind="member"><highlight class="normal"><ref refid="class_mass_inferencer_1aa1f9519adb814a99f8c20a5d28d2f4e9" kindref="member">MassInferencer::MassInferencer</ref>(<ref refid="_dataset_reader_8h_1a30d89cba514a220d64d04535c0465f1c" kindref="member">DatasetReaderPtr</ref><sp/>reader,<sp/><ref refid="_framework_inferencer_8h_1a7b59ebc4b080d1be0d1a6240703011f2" kindref="member">FrameworkInferencerPtr</ref><sp/>inferencer,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>confidence_threshold,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>debug):<sp/>reader(reader),<sp/>inferencer(inferencer),<sp/>confidence_threshold(confidence_threshold),<sp/>debug(debug)</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Constructor<sp/>to<sp/>avoid<sp/>writing<sp/>results<sp/>to<sp/>outputPath</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>saveOutput<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alreadyProcessed=0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="class_mass_inferencer_1a64197fd7172177a03d5e87f5dbf37dc3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_mass_inferencer_1a64197fd7172177a03d5e87f5dbf37dc3" kindref="member">MassInferencer::process</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useDepthImages,<sp/><ref refid="_dataset_reader_8h_1a30d89cba514a220d64d04535c0465f1c" kindref="member">DatasetReaderPtr</ref><sp/>readerDetection)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sample" kindref="compound">Sample</ref><sp/>sample;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter=0;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nsamples<sp/>=<sp/>this-&gt;reader-&gt;getNumberOfElements();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(alreadyProcessed&gt;0){</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Already<sp/>evaluated:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sample.<ref refid="struct_sample_1adead1781500bbf8508eae6f983621d3a" kindref="member">getSampleID</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>counter<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nsamples<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;reader-&gt;getNextSample(sample);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter++;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alreadyProcessed--;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(this-&gt;reader-&gt;getNextSample(sample)){</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter++;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;stopDeployer<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>*(this-&gt;stopDeployer))<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Deployer<sp/>Process<sp/>Stopped&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Evaluating<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sample.<ref refid="struct_sample_1adead1781500bbf8508eae6f983621d3a" kindref="member">getSampleID</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>counter<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nsamples<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::Mat<sp/>image2detect;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useDepthImages)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image2detect<sp/>=<sp/>sample.<ref refid="struct_sample_1ae6488ecd5c5996029a68915541b01245" kindref="member">getDepthColorMapImage</ref>();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image2detect<sp/>=<sp/>sample.<ref refid="struct_sample_1abf69bbc9b312c22d3ded30d30d1e278f" kindref="member">getColorImage</ref>();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sample" kindref="compound">Sample</ref><sp/>detection;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>thresh<sp/>=<sp/>this-&gt;confidence_threshold<sp/>==<sp/>NULL<sp/>?<sp/>this-&gt;default_confidence_threshold</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>*(this-&gt;confidence_threshold);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detection=this-&gt;inferencer-&gt;detect(image2detect,<sp/>thresh);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::runtime_error&amp;<sp/>error)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>Occured:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>error.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detection.<ref refid="struct_sample_1a64fc306f85a0a1966f5f3b662efe95bb" kindref="member">setSampleID</ref>(sample.<ref refid="struct_sample_1adead1781500bbf8508eae6f983621d3a" kindref="member">getSampleID</ref>());</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(saveOutput)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detection.<ref refid="struct_sample_1a2c873df91344017f41f144af9baa3b7c" kindref="member">save</ref>(this-&gt;resultsPath);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;debug)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::Mat<sp/>image<sp/>=sample.<ref refid="struct_sample_1a19aef3e998d244412a87c9d7760d0937" kindref="member">getSampledColorImage</ref>();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_sample" kindref="compound">Sample</ref><sp/>detectionWithImage;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detectionWithImage=detection;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useDepthImages)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detectionWithImage.<ref refid="struct_sample_1a37c84ccbf7cbc37823327da68037c51a" kindref="member">setColorImage</ref>(sample.<ref refid="struct_sample_1ae6488ecd5c5996029a68915541b01245" kindref="member">getDepthColorMapImage</ref>());</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detectionWithImage.<ref refid="struct_sample_1a37c84ccbf7cbc37823327da68037c51a" kindref="member">setColorImage</ref>(sample.<ref refid="struct_sample_1abf69bbc9b312c22d3ded30d30d1e278f" kindref="member">getColorImage</ref>());</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::imshow(</highlight><highlight class="stringliteral">&quot;GT<sp/>on<sp/>RGB&quot;</highlight><highlight class="normal">,<sp/>image);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useDepthImages){</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::imshow(</highlight><highlight class="stringliteral">&quot;GT<sp/>on<sp/>Depth&quot;</highlight><highlight class="normal">,<sp/>sample.<ref refid="struct_sample_1a4bd0f24d929a2559152a88d7669c84a2" kindref="member">getSampledDepthColorMapImage</ref>());</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::imshow(</highlight><highlight class="stringliteral">&quot;Input&quot;</highlight><highlight class="normal">,<sp/>image2detect);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::imshow(</highlight><highlight class="stringliteral">&quot;Detection&quot;</highlight><highlight class="normal">,<sp/>detectionWithImage.<ref refid="struct_sample_1a19aef3e998d244412a87c9d7760d0937" kindref="member">getSampledColorImage</ref>());</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::waitKey(100);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detection.<ref refid="struct_sample_1a54f7617fddaaa461fd46320e5bb19201" kindref="member">clearColorImage</ref>();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detection.<ref refid="struct_sample_1a7e9518b37a26d5d3788f090808a691ba" kindref="member">clearDepthImage</ref>();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(readerDetection<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readerDetection-&gt;addSample(detection);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//samples-&gt;push_back(detection);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::destroyAllWindows();</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Mean<sp/>inference<sp/>time:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;inferencer-&gt;getMeanDurationTime()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(ms)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><sp/>std::endl;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="DeepLearningSuite/DeepLearningSuiteLib/FrameworkEvaluator/MassInferencer.cpp"/>
  </compounddef>
</doxygen>
