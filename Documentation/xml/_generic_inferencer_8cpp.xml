<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_generic_inferencer_8cpp" kind="file" language="C++">
    <compoundname>GenericInferencer.cpp</compoundname>
    <includes local="no">glog/logging.h</includes>
    <includes refid="_generic_inferencer_8h" local="yes">GenericInferencer.h</includes>
    <incdepgraph>
      <node id="3522">
        <label>boost/shared_ptr.hpp</label>
      </node>
      <node id="3532">
        <label>maskApi.h</label>
        <link refid="mask_api_8h"/>
      </node>
      <node id="3517">
        <label>glog/logging.h</label>
      </node>
      <node id="3530">
        <label>Regions/RleRegions.h</label>
        <link refid="_rle_regions_8h"/>
        <childnode refid="3520" relation="include">
        </childnode>
        <childnode refid="3525" relation="include">
        </childnode>
        <childnode refid="3531" relation="include">
        </childnode>
      </node>
      <node id="3518">
        <label>GenericInferencer.h</label>
        <link refid="_generic_inferencer_8h"/>
        <childnode refid="3519" relation="include">
        </childnode>
        <childnode refid="3534" relation="include">
        </childnode>
        <childnode refid="3539" relation="include">
        </childnode>
      </node>
      <node id="3524">
        <label>Regions/RectRegions.h</label>
        <link refid="_rect_regions_8h"/>
        <childnode refid="3520" relation="include">
        </childnode>
        <childnode refid="3525" relation="include">
        </childnode>
        <childnode refid="3526" relation="include">
        </childnode>
        <childnode refid="3527" relation="include">
        </childnode>
      </node>
      <node id="3525">
        <label>Regions.h</label>
        <link refid="_regions_8h"/>
        <childnode refid="3520" relation="include">
        </childnode>
        <childnode refid="3522" relation="include">
        </childnode>
      </node>
      <node id="3520">
        <label>opencv2/opencv.hpp</label>
      </node>
      <node id="3537">
        <label>numpy/arrayobject.h</label>
      </node>
      <node id="3528">
        <label>Regions/ContourRegions.h</label>
        <link refid="_contour_regions_8h"/>
        <childnode refid="3520" relation="include">
        </childnode>
        <childnode refid="3525" relation="include">
        </childnode>
        <childnode refid="3529" relation="include">
        </childnode>
      </node>
      <node id="3534">
        <label>FrameworkEvaluator/TensorFlowInferencer.h</label>
        <link refid="_tensor_flow_inferencer_8h"/>
        <childnode refid="3519" relation="include">
        </childnode>
        <childnode refid="3535" relation="include">
        </childnode>
        <childnode refid="3536" relation="include">
        </childnode>
        <childnode refid="3537" relation="include">
        </childnode>
        <childnode refid="3538" relation="include">
        </childnode>
      </node>
      <node id="3533">
        <label>boost/date_time/posix_time/posix_time.hpp</label>
      </node>
      <node id="3521">
        <label>opencv2/imgproc/imgproc.hpp</label>
      </node>
      <node id="3531">
        <label>RleRegion.h</label>
        <link refid="_rle_region_8h"/>
        <childnode refid="3522" relation="include">
        </childnode>
        <childnode refid="3532" relation="include">
        </childnode>
      </node>
      <node id="3535">
        <label>boost/python.hpp</label>
      </node>
      <node id="3536">
        <label>Python.h</label>
      </node>
      <node id="3523">
        <label>Common/Sample.h</label>
        <link refid="_sample_8h"/>
        <childnode refid="3524" relation="include">
        </childnode>
        <childnode refid="3528" relation="include">
        </childnode>
        <childnode refid="3530" relation="include">
        </childnode>
      </node>
      <node id="3538">
        <label>vector</label>
      </node>
      <node id="3539">
        <label>FrameworkEvaluator/KerasInferencer.h</label>
        <link refid="_keras_inferencer_8h"/>
        <childnode refid="3519" relation="include">
        </childnode>
        <childnode refid="3535" relation="include">
        </childnode>
        <childnode refid="3536" relation="include">
        </childnode>
        <childnode refid="3537" relation="include">
        </childnode>
        <childnode refid="3538" relation="include">
        </childnode>
      </node>
      <node id="3529">
        <label>ContourRegion.h</label>
        <link refid="_contour_region_8h"/>
        <childnode refid="3520" relation="include">
        </childnode>
        <childnode refid="3522" relation="include">
        </childnode>
      </node>
      <node id="3516">
        <label>DeepLearningSuite/DeepLearningSuiteLib/FrameworkEvaluator/GenericInferencer.cpp</label>
        <link refid="_generic_inferencer_8cpp"/>
        <childnode refid="3517" relation="include">
        </childnode>
        <childnode refid="3518" relation="include">
        </childnode>
      </node>
      <node id="3519">
        <label>FrameworkInferencer.h</label>
        <link refid="_framework_inferencer_8h"/>
        <childnode refid="3520" relation="include">
        </childnode>
        <childnode refid="3521" relation="include">
        </childnode>
        <childnode refid="3522" relation="include">
        </childnode>
        <childnode refid="3523" relation="include">
        </childnode>
        <childnode refid="3533" relation="include">
        </childnode>
        <childnode refid="3527" relation="include">
        </childnode>
      </node>
      <node id="3526">
        <label>RectRegion.h</label>
        <link refid="_rect_region_8h"/>
        <childnode refid="3520" relation="include">
        </childnode>
      </node>
      <node id="3527">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>frivas<sp/>on<sp/>4/02/17.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;glog/logging.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_generic_inferencer_8h" kindref="compound">GenericInferencer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="class_generic_inferencer_1ac27f8f3d177ab05d861ef28dbd0b8a28" refkind="member"><highlight class="normal"><ref refid="class_generic_inferencer_1ac27f8f3d177ab05d861ef28dbd0b8a28" kindref="member">GenericInferencer::GenericInferencer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;netConfig,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;netWeights,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>classNames,</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;implementation,<sp/>std::map&lt;std::string,<sp/>std::string&gt;*<sp/>inferencerParamsMap)<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>configureAvailablesImplementations(this-&gt;availableImplementations);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::find(this-&gt;availableImplementations.begin(),<sp/>this-&gt;availableImplementations.end(),<sp/>implementation)<sp/>!=<sp/>this-&gt;availableImplementations.end()){</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imp<sp/>=<sp/>getImplementation(implementation);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(imp)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DARKNET_ACTIVE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_generic_inferencer_8h_1a80df93ab84f47f76903a9dfcb1dc0ca9a11a5c02270b7e7a4d6471bb9ada4f389" kindref="member">INF_YOLO</ref>:</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;darknetInferencerPtr<sp/>=<sp/><ref refid="_darknet_inferencer_8h_1a3367271d68bed2ea0a4e8d039bf86f90" kindref="member">DarknetInferencerPtr</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_darknet_inferencer" kindref="compound">DarknetInferencer</ref>(netConfig,<sp/>netWeights,classNames));</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_generic_inferencer_8h_1a80df93ab84f47f76903a9dfcb1dc0ca9a0733f7f52b47fb86e18b72d10f84f096" kindref="member">INF_TENSORFLOW</ref>:</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;tensorFlowInferencerPtr<sp/>=<sp/><ref refid="_tensor_flow_inferencer_8h_1a7ab10b4af80e2d31c5f59a5a54cc971d" kindref="member">TensorFlowInferencerPtr</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_tensor_flow_inferencer" kindref="compound">TensorFlowInferencer</ref>(netConfig,<sp/>netWeights,classNames));</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_generic_inferencer_8h_1a80df93ab84f47f76903a9dfcb1dc0ca9a835ccdeb73dd9d2c12a3718b9dcc01cc" kindref="member">INF_KERAS</ref>:</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;kerasInferencerPtr<sp/>=<sp/><ref refid="_keras_inferencer_8h_1adc669830717b53b7ea12b1d9dfcb8be9" kindref="member">KerasInferencerPtr</ref>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_keras_inferencer" kindref="compound">KerasInferencer</ref>(netConfig,<sp/>netWeights,classNames));</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ENABLE_DNN_CAFFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_generic_inferencer_8h_1a80df93ab84f47f76903a9dfcb1dc0ca9aa06e22077eb6ffb26a978fd53ad63418" kindref="member">INF_CAFFE</ref>:</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;caffeInferencerPtr<sp/>=<sp/><ref refid="_caffe_inferencer_8h_1a3947e32fc14579adb5ee647a82b72686" kindref="member">CaffeInferencerPtr</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_caffe_inferencer" kindref="compound">CaffeInferencer</ref>(netConfig,<sp/>netWeights,<sp/>classNames,<sp/>inferencerParamsMap));</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(WARNING)&lt;&lt;implementation<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>not<sp/>a<sp/>valid<sp/>inferencer<sp/>implementation&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(WARNING)&lt;&lt;implementation<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>not<sp/>a<sp/>valid<sp/>inferencer<sp/>implementation&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GenericInferencer::configureAvailablesImplementations(std::vector&lt;std::string&gt;&amp;<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DARKNET_ACTIVE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>data.push_back(</highlight><highlight class="stringliteral">&quot;yolo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>data.push_back(</highlight><highlight class="stringliteral">&quot;tensorflow&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>data.push_back(</highlight><highlight class="stringliteral">&quot;keras&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ENABLE_DNN_CAFFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>data.push_back(</highlight><highlight class="stringliteral">&quot;caffe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><ref refid="_generic_inferencer_8h_1a80df93ab84f47f76903a9dfcb1dc0ca9" kindref="member">INFERENCER_IMPLEMENTATIONS</ref><sp/>GenericInferencer::getImplementation(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;inferencerImplementation)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inferencerImplementation.compare(</highlight><highlight class="stringliteral">&quot;yolo&quot;</highlight><highlight class="normal">)==0){</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_generic_inferencer_8h_1a80df93ab84f47f76903a9dfcb1dc0ca9a11a5c02270b7e7a4d6471bb9ada4f389" kindref="member">INF_YOLO</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inferencerImplementation.compare(</highlight><highlight class="stringliteral">&quot;tensorflow&quot;</highlight><highlight class="normal">)==0){</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_generic_inferencer_8h_1a80df93ab84f47f76903a9dfcb1dc0ca9a0733f7f52b47fb86e18b72d10f84f096" kindref="member">INF_TENSORFLOW</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inferencerImplementation.compare(</highlight><highlight class="stringliteral">&quot;keras&quot;</highlight><highlight class="normal">)==0){</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_generic_inferencer_8h_1a80df93ab84f47f76903a9dfcb1dc0ca9a835ccdeb73dd9d2c12a3718b9dcc01cc" kindref="member">INF_KERAS</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inferencerImplementation.compare(</highlight><highlight class="stringliteral">&quot;caffe&quot;</highlight><highlight class="normal">)==0){</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_generic_inferencer_8h_1a80df93ab84f47f76903a9dfcb1dc0ca9aa06e22077eb6ffb26a978fd53ad63418" kindref="member">INF_CAFFE</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="class_generic_inferencer_1a786e55caa6a7329b8f5d1011372b8942" refkind="member"><highlight class="normal"><ref refid="_framework_inferencer_8h_1a7b59ebc4b080d1be0d1a6240703011f2" kindref="member">FrameworkInferencerPtr</ref><sp/><ref refid="class_generic_inferencer_1a786e55caa6a7329b8f5d1011372b8942" kindref="member">GenericInferencer::getInferencer</ref>()<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(imp)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DARKNET_ACTIVE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_generic_inferencer_8h_1a80df93ab84f47f76903a9dfcb1dc0ca9a11a5c02270b7e7a4d6471bb9ada4f389" kindref="member">INF_YOLO</ref>:</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;darknetInferencerPtr;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_generic_inferencer_8h_1a80df93ab84f47f76903a9dfcb1dc0ca9a0733f7f52b47fb86e18b72d10f84f096" kindref="member">INF_TENSORFLOW</ref>:</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;tensorFlowInferencerPtr;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_generic_inferencer_8h_1a80df93ab84f47f76903a9dfcb1dc0ca9a835ccdeb73dd9d2c12a3718b9dcc01cc" kindref="member">INF_KERAS</ref>:</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;kerasInferencerPtr;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ENABLE_DNN_CAFFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_generic_inferencer_8h_1a80df93ab84f47f76903a9dfcb1dc0ca9aa06e22077eb6ffb26a978fd53ad63418" kindref="member">INF_CAFFE</ref>:</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;caffeInferencerPtr;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(WARNING)&lt;&lt;imp<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>not<sp/>a<sp/>valid<sp/>reader<sp/>implementation&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="class_generic_inferencer_1a40f6285002820780d626e80a2524a494" refkind="member"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="class_generic_inferencer_1a40f6285002820780d626e80a2524a494" kindref="member">GenericInferencer::getAvailableImplementations</ref>()<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>data;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>configureAvailablesImplementations(data);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="DeepLearningSuite/DeepLearningSuiteLib/FrameworkEvaluator/GenericInferencer.cpp"/>
  </compounddef>
</doxygen>
