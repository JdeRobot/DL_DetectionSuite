<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_framework_inferencer_8cpp" kind="file" language="C++">
    <compoundname>FrameworkInferencer.cpp</compoundname>
    <includes refid="_framework_inferencer_8h" local="yes">FrameworkInferencer.h</includes>
    <incdepgraph>
      <node id="3466">
        <label>boost/shared_ptr.hpp</label>
      </node>
      <node id="3476">
        <label>maskApi.h</label>
        <link refid="mask_api_8h"/>
      </node>
      <node id="3474">
        <label>Regions/RleRegions.h</label>
        <link refid="_rle_regions_8h"/>
        <childnode refid="3464" relation="include">
        </childnode>
        <childnode refid="3469" relation="include">
        </childnode>
        <childnode refid="3475" relation="include">
        </childnode>
      </node>
      <node id="3468">
        <label>Regions/RectRegions.h</label>
        <link refid="_rect_regions_8h"/>
        <childnode refid="3464" relation="include">
        </childnode>
        <childnode refid="3469" relation="include">
        </childnode>
        <childnode refid="3470" relation="include">
        </childnode>
        <childnode refid="3471" relation="include">
        </childnode>
      </node>
      <node id="3469">
        <label>Regions.h</label>
        <link refid="_regions_8h"/>
        <childnode refid="3464" relation="include">
        </childnode>
        <childnode refid="3466" relation="include">
        </childnode>
      </node>
      <node id="3464">
        <label>opencv2/opencv.hpp</label>
      </node>
      <node id="3462">
        <label>DeepLearningSuite/DeepLearningSuiteLib/FrameworkEvaluator/FrameworkInferencer.cpp</label>
        <link refid="_framework_inferencer_8cpp"/>
        <childnode refid="3463" relation="include">
        </childnode>
      </node>
      <node id="3472">
        <label>Regions/ContourRegions.h</label>
        <link refid="_contour_regions_8h"/>
        <childnode refid="3464" relation="include">
        </childnode>
        <childnode refid="3469" relation="include">
        </childnode>
        <childnode refid="3473" relation="include">
        </childnode>
      </node>
      <node id="3477">
        <label>boost/date_time/posix_time/posix_time.hpp</label>
      </node>
      <node id="3465">
        <label>opencv2/imgproc/imgproc.hpp</label>
      </node>
      <node id="3475">
        <label>RleRegion.h</label>
        <link refid="_rle_region_8h"/>
        <childnode refid="3466" relation="include">
        </childnode>
        <childnode refid="3476" relation="include">
        </childnode>
      </node>
      <node id="3467">
        <label>Common/Sample.h</label>
        <link refid="_sample_8h"/>
        <childnode refid="3468" relation="include">
        </childnode>
        <childnode refid="3472" relation="include">
        </childnode>
        <childnode refid="3474" relation="include">
        </childnode>
      </node>
      <node id="3473">
        <label>ContourRegion.h</label>
        <link refid="_contour_region_8h"/>
        <childnode refid="3464" relation="include">
        </childnode>
        <childnode refid="3466" relation="include">
        </childnode>
      </node>
      <node id="3463">
        <label>FrameworkInferencer.h</label>
        <link refid="_framework_inferencer_8h"/>
        <childnode refid="3464" relation="include">
        </childnode>
        <childnode refid="3465" relation="include">
        </childnode>
        <childnode refid="3466" relation="include">
        </childnode>
        <childnode refid="3467" relation="include">
        </childnode>
        <childnode refid="3477" relation="include">
        </childnode>
        <childnode refid="3471" relation="include">
        </childnode>
      </node>
      <node id="3470">
        <label>RectRegion.h</label>
        <link refid="_rect_region_8h"/>
        <childnode refid="3464" relation="include">
        </childnode>
      </node>
      <node id="3471">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>frivas<sp/>on<sp/>24/02/17.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_framework_inferencer_8h" kindref="compound">FrameworkInferencer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="class_framework_inferencer_1a4c2b3b0ec03df5f97e7b32235422dc60" refkind="member"><highlight class="normal"><ref refid="struct_sample" kindref="compound">Sample</ref><sp/><ref refid="class_framework_inferencer_1a4c2b3b0ec03df5f97e7b32235422dc60" kindref="member">FrameworkInferencer::detect</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv::Mat<sp/>&amp;image,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>confidence_threshold)<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::posix_time::ptime<sp/>startTime<sp/>=<sp/>boost::posix_time::microsec_clock::local_time();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_sample" kindref="compound">Sample</ref><sp/>s<sp/>=<sp/><ref refid="class_framework_inferencer_1a8fd7e708c8be4471bc2b37a4193a9045" kindref="member">detectImp</ref>(image,<sp/>confidence_threshold);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::posix_time::ptime<sp/>endTime<sp/>=<sp/>boost::posix_time::microsec_clock::local_time();</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::posix_time::time_duration<sp/>duration<sp/>=<sp/>endTime-startTime;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>elapsedTime<sp/>=<sp/>duration.total_milliseconds();</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>durationVector.push_back(elapsedTime);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="class_framework_inferencer_1a51291e562ddc5a4b86c0c413439d59a5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_framework_inferencer_1a51291e562ddc5a4b86c0c413439d59a5" kindref="member">FrameworkInferencer::getMeanDurationTime</ref>()<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>accumulate=0;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>this-&gt;durationVector.begin(),<sp/>end<sp/>=<sp/>this-&gt;durationVector.end();<sp/>it<sp/>!=<sp/>end;<sp/>++it)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accumulate+=(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(*it);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;durationVector.size()<sp/>==0)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>accumulate/(int)this-&gt;durationVector.size();</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="class_framework_inferencer_1adda91b1e8b6238e4cd3cc18e84675fea" refkind="member"><highlight class="normal"><ref refid="class_framework_inferencer_1adda91b1e8b6238e4cd3cc18e84675fea" kindref="member">FrameworkInferencer::FrameworkInferencer</ref>()<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">FrameworkInferencer::~FrameworkInferencer()<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Mean<sp/>inference<sp/>time:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;<ref refid="class_framework_inferencer_1a51291e562ddc5a4b86c0c413439d59a5" kindref="member">getMeanDurationTime</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(ms)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><sp/>std::endl;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="DeepLearningSuite/DeepLearningSuiteLib/FrameworkEvaluator/FrameworkInferencer.cpp"/>
  </compounddef>
</doxygen>
